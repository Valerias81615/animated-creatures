#include "stdafx.h"
#include <memory>
#include <string>
#include <iostream>
using namespace std;

class Creature
{
protected:
	string CreatureName;
public:
	Creature(string n) {
		CreatureName = n; //assigns variable n to CreatureName
	}
	virtual void DoAction() = 0; //default
	virtual void DrawOnScreen() = 0; //default
};

class Player : public Creature
{
public:
	Player(string n) : Creature(n) {}
	virtual void DoAction()
	{
		cout << " is attacking!!" << endl << endl;
	}
	virtual void DrawOnScreen()
	{
		cout << CreatureName; //prints name of Player
		DoAction(); //calls function DoAction()
	}
};

class Monster : public Creature
{
public:
	Monster(string n) : Creature(n) {}
	virtual void DoAction()
	{
		cout << " is doing monster stuff!!" << endl << endl;
	}
	virtual void DrawOnScreen()
	{
		cout << CreatureName; //prints name of Monster
		DoAction(); //calls function DoAction
	}
};

class WildPig : public Monster
{

public:
	WildPig(string n) : Monster(n) {}
	virtual void DoAction()
	{
		cout << " is Running!!" << endl << endl;
	}
	virtual void DrawOnScreen()
	{
		cout << CreatureName; //prints name of WildPig
		DoAction(); //calls function DoAction()
	}
};

class Dragon : public Monster
{

public:
	Dragon(string n) : Monster(n) {}
	virtual void DoAction()
	{
		cout << " is breathing Fire!!" << endl << endl;
	}
	virtual void DrawOnScreen()
	{
		cout << CreatureName;
		DoAction(); // calls function DoAction()
	}
};


int main()
{
	shared_ptr<Player> p = make_shared<Player>("Player Timmy");
	p->DrawOnScreen(); //calls and prints DrawOnScreen()
	shared_ptr<Monster> m = make_shared<Monster>("Monster UFO");
	m->DrawOnScreen(); //calls and prints DrawOnScreen()
	shared_ptr<WildPig> wp = make_shared<WildPig>("WildPig Piglet");
	wp->DrawOnScreen(); //calls and prints DrawOnScreen ()
	shared_ptr<Dragon> d = make_shared<Dragon>("Dragon Viserion");
	d->DrawOnScreen(); //calls and prints DrawOnScreen ()

	system("PAUSE");
	return 0;
}
